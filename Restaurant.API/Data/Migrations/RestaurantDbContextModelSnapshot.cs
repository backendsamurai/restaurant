// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Restaurant.API.Data;

#nullable disable

namespace Restaurant.API.Data.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    partial class RestaurantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Restaurant.API.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_customers_user_id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Restaurant.API.Entities.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_desks");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_desks_name");

                    b.ToTable("desks", (string)null);
                });

            modelBuilder.Entity("Restaurant.API.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_employees_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_employees_user_id");

                    b.ToTable("employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("60e20876-9133-4bed-b429-2f03c24c97f1"),
                            RoleId = new Guid("afe98085-b724-4682-ae78-163ef93dd4be"),
                            UserId = new Guid("74778f86-b58b-4e5a-953d-6433c816d66e")
                        });
                });

            modelBuilder.Entity("Restaurant.API.Entities.EmployeeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_employee_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_employee_roles_name");

                    b.ToTable("employee_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4018a6a-b5f4-4975-8bd4-f9ab5d5f40c1"),
                            Name = "waiter"
                        },
                        new
                        {
                            Id = new Guid("afe98085-b724-4682-ae78-163ef93dd4be"),
                            Name = "manager"
                        });
                });

            modelBuilder.Entity("Restaurant.API.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("DeskId")
                        .HasColumnType("uuid")
                        .HasColumnName("desk_id");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uuid")
                        .HasColumnName("waiter_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_orders_customer_id");

                    b.HasIndex("DeskId")
                        .HasDatabaseName("ix_orders_desk_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_orders_payment_id");

                    b.HasIndex("WaiterId")
                        .HasDatabaseName("ix_orders_waiter_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Restaurant.API.Entities.OrderLineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_order_line_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_line_items_order_id");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_line_items_product_id");

                    b.ToTable("order_line_items", (string)null);
                });

            modelBuilder.Entity("Restaurant.API.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Bill")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("bill");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("Tip")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("tip");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Restaurant.API.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("old_price");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_products_name");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Restaurant.API.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_product_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_product_categories_name");

                    b.ToTable("product_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("357e2e3e-7e2f-4979-9ff7-c3907bd8bff2"),
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = new Guid("57f87102-96ad-4fc4-a9de-702337bcbfec"),
                            Name = "Steaks"
                        },
                        new
                        {
                            Id = new Guid("a5cfbc0c-8b7e-4ef7-a03d-2bbb629c83aa"),
                            Name = "Sushi"
                        },
                        new
                        {
                            Id = new Guid("c836cd65-613d-466f-ba11-a791f2400de9"),
                            Name = "Barbecue"
                        },
                        new
                        {
                            Id = new Guid("ffbc3b63-837b-4ab9-9778-822d3c624c83"),
                            Name = "Hot Dogs"
                        },
                        new
                        {
                            Id = new Guid("1a3942aa-215e-48f1-a7b9-d352d50ac191"),
                            Name = "Pizzas"
                        },
                        new
                        {
                            Id = new Guid("354844d0-0454-4c75-97cd-e3a8711e054c"),
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = new Guid("c3c85874-9e69-449b-ad1b-1e6c7f0711a1"),
                            Name = "Coffee"
                        },
                        new
                        {
                            Id = new Guid("19271457-1818-4e9e-b75e-be40afa3ef46"),
                            Name = "Fast Food"
                        },
                        new
                        {
                            Id = new Guid("509669de-9615-4432-bd23-d3f824c2cc5e"),
                            Name = "Desserts"
                        });
                });

            modelBuilder.Entity("Restaurant.API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("74778f86-b58b-4e5a-953d-6433c816d66e"),
                            Email = "victor_samoylov@gmail.com",
                            IsVerified = false,
                            Name = "Victor Samoylov",
                            PasswordHash = "9A276BA89F9DFE6FCFA2D8598CA3416FC2F09F36567C86644A9A10A9B727FED8-7BEC182DD59275168585E0A4B0DA80F9",
                            Role = "employee"
                        });
                });

            modelBuilder.Entity("Restaurant.API.Entities.Customer", b =>
                {
                    b.HasOne("Restaurant.API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customers_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurant.API.Entities.Employee", b =>
                {
                    b.HasOne("Restaurant.API.Entities.EmployeeRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_employee_roles_role_id");

                    b.HasOne("Restaurant.API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurant.API.Entities.Order", b =>
                {
                    b.HasOne("Restaurant.API.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_customers_customer_id");

                    b.HasOne("Restaurant.API.Entities.Desk", "Desk")
                        .WithMany()
                        .HasForeignKey("DeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_desks_desk_id");

                    b.HasOne("Restaurant.API.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_orders_payments_payment_id");

                    b.HasOne("Restaurant.API.Entities.Employee", "Waiter")
                        .WithMany()
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_employees_waiter_id");

                    b.Navigation("Customer");

                    b.Navigation("Desk");

                    b.Navigation("Payment");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Restaurant.API.Entities.OrderLineItem", b =>
                {
                    b.HasOne("Restaurant.API.Entities.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_line_items_orders_order_id");

                    b.HasOne("Restaurant.API.Entities.Product", "Product")
                        .WithOne()
                        .HasForeignKey("Restaurant.API.Entities.OrderLineItem", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_line_items_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Restaurant.API.Entities.Product", b =>
                {
                    b.HasOne("Restaurant.API.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Restaurant.API.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
